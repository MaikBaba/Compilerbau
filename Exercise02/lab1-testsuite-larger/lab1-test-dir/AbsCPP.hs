

module AbsCPP where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFunc Type Id [Arg] [Stm]
  deriving (Eq, Ord, Show, Read)

data Type = Tbool | Tdouble | Tint | Tstring | Tvoid
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecl Type Id
    | SDecls Type Id [Id]
    | SInit Type Id Exp
    | SReturn Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EString String
    | ETrue
    | EFalse
    | EId Id
    | ECall Id [Exp]
    | EIndex Id Id
    | EQuali Id Id
    | EPIncr Exp
    | EPDecr Exp
    | EDeref Id
    | EDot Id Id
    | EArrow Id Id
    | EIncr Exp
    | EDecr Exp
    | ELogNeg Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ESm Exp Exp
    | EGt Exp Exp
    | ESmEq Exp Exp
    | EGtEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EAssPlus Exp Exp
    | EAssMinus Exp Exp
    | ECond Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

