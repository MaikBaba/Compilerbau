-- Programms

PDefs.   	Program ::= [Def] ;

terminator Def "" ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;


-- Definitions

DefFunction.		Def ::= Type Id "(" [FuncArg] ")" FuncBody ;
DefFunctionInline.	Def ::= "inline" Type Id "(" [FuncArg] ")" FuncBody ;


FuncBodyFull.		FuncBody ::= "{" [Stm] "}" ;
FuncBodyEmpty.		FuncBody ::= ";" ;

separator FuncArg "," ;

terminator Stm "" ;


DefTyp.			Def ::= "typedef" Type Id ";" ;

DefDec.			Def ::= Dec ;

DefStruct.		Def ::= "struct" Id "{" [Dec] "}" ";" ;

DefQualConstOrTemp.	Def ::= "using"  QCOTType ";" ;

separator Dec "" ;


-- Argument lists, declarations

FuncArgDec.		FuncArg ::=  Type ;
FuncArgDecId.		FuncArg ::=  Type Id ;
FuncArgDecIdExp.	FuncArg ::=  Type Id "=" Exp ;
FuncArgDecConst.	FuncArg ::=  "const" Type ;
FuncArgDecIdConst.	FuncArg ::=  "const" Type Id ;
FuncArgDecIdExpConst.	FuncArg ::=  "const" Type Id "=" Exp ;


DecVariables.		Dec ::= Type [Id] ";" ;
DecVariableIdExp.	Dec ::= Type Id "=" Exp ";" ;
DecVariableIdExpConst.	Dec ::= "const" Type Id "=" Exp ";" ;


separator nonempty Id "," ;


-- Statements

SExp.		Stm ::= Exp ";" ;
SDec.		Stm ::= Dec ;
SReturn.	Stm ::= "return" Exp ";" ;
SReturnVoid.	Stm ::= "return" ";" ;
SWhile.		Stm ::= "while" "(" Exp ")" Stm ;
SDo.		Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor.		Stm ::= "for" "(" Dec Exp ";" Exp ")" Stm ;

SIf.		Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.	Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

SBlock.		Stm ::= "{" [Stm] "}";

STyp.		Stm ::= "typedef" Type Id ";" ;
SStr.		Stm ::= "struct" Id "{" [Dec] "}" ";" ;


-- Expressions

ETrue.		Exp16 ::= "true" ;
EFalse.		Exp16 ::= "false" ;
EInt.		Exp16 ::= Integer ;
EDouble.	Exp16 ::= Double ;
EChar.		Exp16 ::= Char ;
EString.	Exp16 ::= [String] ;
EId.		Exp16 ::= QCOTType;

EInd.		Exp15 ::= Exp16 "[" Exp "]" ;
ECall.		Exp15 ::= Exp16 "(" [Exp] ")" ;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

EStrP.		Exp14 ::= Exp14 "." Exp15 ;
EStrA.		Exp14 ::= Exp14 "->" Exp15 ;
EPIncr.		Exp14 ::= Exp15 "++" ;
EPDecr.		Exp14 ::=Tc Exp15 "--" ;
EUnaryOp.	Exp14 ::= UnaryOp Exp15;

EIncr.		Exp13 ::= "++" Exp14 ;
EDecr.		Exp13 ::= "--" Exp14 ;
--ENeg.		Exp13 ::= "!" Exp14 ;
ECast.		Exp13 ::= "(" BasicType ")" Exp14 ;

ETimes.		Exp12 ::= Exp12 "*"  Exp13 ;
EDiv.		Exp12 ::= Exp12 "/"  Exp13 ;
ERem.		Exp12 ::= Exp12 "%"  Exp13 ;

EPlus.		Exp11 ::= Exp11 "+"  Exp12 ;
EMinus.		Exp11 ::= Exp11 "-"  Exp12 ;

ELShift.	Exp10 ::= Exp10 "<<" Exp11 ;
ERShift.	Exp10 ::= Exp10 ">>" Exp11 ;

ELt.		Exp9  ::= Exp9  "<"  Exp10 ;
EGt.		Exp9  ::= Exp9  ">"  Exp10 ;
EGtEq.		Exp9  ::= Exp9 ">="  Exp10 ;
ELtEq.		Exp9  ::= Exp9 "<="  Exp10 ;

EEq.		Exp8  ::= Exp8  "==" Exp9 ;
ENEq.		Exp8  ::= Exp8  "!=" Exp9 ;

EAnd.		Exp4  ::= Exp4  "&&" Exp5 ;

EOr.		Exp3  ::= Exp3  "||" Exp4 ;

EAss.		Exp2  ::= Exp3  AssOp Exp2 ;
ECond.		Exp2  ::= Exp3  "?" Exp2 ":" Exp2;

EExcep.		Exp1  ::= "throw" Exp2 ;

AssOpNorm.	AssOp ::= "=" ;
AssOpMul.   	AssOp ::= "*=" ;
AssOpDiv.    	AssOp ::= "/=" ;
AssOpMod.    	AssOp ::= "%=" ;
AssOpAdd.    	AssOp ::= "+=" ;
AssOpSub.    	AssOp ::= "-=" ;
AssOpLeft.   	AssOp ::= "<<=" ;
AssOpRight.  	AssOp ::= ">>=" ;
AssOpAnd.    	AssOp ::= "&=" ;
AssOpXor.    	AssOp ::= "^=" ;
AssOpOr.     	AssOp ::= "|=" ;

UAddress.     UnaryOp ::= "&" ;
UIndirection. UnaryOp ::= "*" ;
UPlus.        UnaryOp ::= "+" ;
UNegative.    UnaryOp ::= "-" ;
UComplement.  UnaryOp ::= "~" ;
ULogicalneg.  UnaryOp ::= "!" ;

coercions Exp 16 ;

separator nonempty String "" ;

separator Exp "," ;


-- Qualified constants and template instantiations

QCOTName.	QualConstOrTemp ::= Id ;
QCOTTemplate.	QualConstOrTemp ::= Id "<" [Type] ">" ;

QCOTEnd.	QCOTType ::= QualConstOrTemp ;
QCOTList.	QCOTType ::= QualConstOrTemp "::" QCOTType ; --[Pointer];

separator nonempty Type "," ;


-- Types

rules BasicType	::= "void" | "bool" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" ;
BasicTypes.	Type ::= BasicType TypePostfixs ;
QCOTTypes.	Type ::= QCOTType TypePostfixs ;
	
TPostPointer.	TypePostfix ::= "*" ;
TPostRef.	TypePostfix ::= "&" ;

TPostfixsEnd.	TypePostfixs ::= ;
TPostfixsList.	TypePostfixs ::= TypePostfix TypePostfixs ;


-- Identifiers

token Id (letter (letter | digit | '_')*) ;

