-- Programm -------------------------------------------------------------------------------

PDefs.              Program ::= [Def] ;


-- Comments -------------------------------------------------------------------------------

comment "//" ;
comment "/*" "*/";
comment "#" ;



-- Definitions -------------------------------------------------------------------------------

DFunc.                Def           ::= Type Id "(" [FunctionArg] ")" DFunctionBody ;
DFuncInline.          Def           ::= "inline" Type Id "(" [FunctionArg] ")" DFunctionBody ;

DFunctionBodyCont.    DFunctionBody ::= "{" [Stm] "}" ;
DFunctionBodyNothing. DFunctionBody ::= ";" ;

ArgDefNorm.               FunctionArg ::= Type;
ArgDefId.                 FunctionArg ::= Type Id;
ArgDefIdDefault.          FunctionArg ::= Type Id "=" Exp ;
ArgDefNormConst.          FunctionArg ::= "const" Type;
ArgDefIdConst.            FunctionArg ::= "const" Type Id;
ArgDefIdDefaultConst.     FunctionArg ::= "const" Type Id "=" Exp ;





DTypedef.         Def ::= "typedef" Type Id ";" ;
DStruct.          Def ::= "struct" Id "{" [VarInit] "}" ";" ;
DVar.             Def ::= VarInit ;
DUsing.           Def ::= "using" QCOTType ";" ;     


-- BasicTypes -------------------------------------------------------------------------------

rules BasicType ::= "bool" | "double" | "int" | "char" | "void" | "char" | "short" | "long" | "float" | "signed" | "unsigned" ;
DefType.            Type ::= BasicType RefOperators ;
DefQCOTType.        Type ::= QCOTType RefOperators ;

OpRef.              RefOperator ::= "&" ;
OpStar.             RefOpertor ::= "*" ;

PostfixNothing.     RefOperators::= ;
PostfixList.        RefOperators ::= RefOperator RefOperators;


-- Qualified constants and template instantiations -------------------------------------------------------------------------------

QCOTId.             QCOT ::= Id ;

QCOTTemplate.       QCOT ::= Id "<" [Type] ">" ;

QCOTEnd.  QCOTType ::= QCOT ;
QCOTList. QCOTType ::= QCOT "::" QCOTType ;
-- todo this creates 2 more shift reduce conflicts adding Type instead of QCOTType in the Rule QCOTList


-- Statements -------------------------------------------------------------------------------


SExp.                 Stm ::= Exp ";" ;
SVarInit.             Stm ::= VarInit ;


SDecl.              VarInit ::= Type [Id] ";" ;
SInit.              VarInit ::= Type Id "=" Exp ";" ;
SInitConst.         VarInit ::= "const" Type Id "=" Exp ";" ;


SReturn.            Stm ::= "return" Exp ";" ;
SReturnVoid.        Stm ::= "return" ";" ;

SWhile.             Stm ::= "while" "(" Exp ")" Stm ;
SDo.                Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor.               Stm ::= "for" "(" VarInit Exp ";" Exp ")" Stm ;

SIf.                Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.            Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

SBlock.             Stm ::= "{" [Stm] "}";

SStruct.            Stm ::= "struct" Id "{" [VarInit] "}" ";" ;
STypedef.           Stm ::= "typedef" Type Id ";" ;


-- Expressions -------------------------------------------------------------------------------

rules               Exp16 ::= Integer | Double | [String] | Char | "true" | "false" | QCOTType ;

ECall.              Exp15 ::= Id "(" [Exp] ")" ;
EQuali.             Exp15 ::= Id "[" Exp "]" ;

EPIncr.             Exp14 ::= Exp15 "++" ;
EPDecr.             Exp14 ::= Exp15 "--" ;
EDeref.             Exp14 ::= "*" Id ;

EDot.               Exp14 ::= Exp14 "." Exp15 ;
EArrow.             Exp14 ::= Exp14 "->" Exp15 ;

EIncr.              Exp13 ::= "++" Exp14 ;
EDecr.              Exp13 ::= "--" Exp14 ;
ELogNeg.            Exp13 ::= "!" Exp14 ;

ECast.              Exp13 ::= "(" BasicType ")" Exp14 ;

ENeg.               Exp13 ::= "-" Exp14 ;

EMul.               Exp12 ::= Exp12 "*" Exp13 ;
EDiv.               Exp12 ::= Exp12 "/" Exp13 ;
EMod.               Exp12 ::= Exp12 "%" Exp13 ;

EAdd.               Exp11 ::= Exp11 "+" Exp12 ;
ESub.               Exp11 ::= Exp11 "-" Exp12 ;

ELShift.            Exp10 ::= Exp10 "<<" Exp11 ;
ERShift.            Exp10 ::= Exp10 ">>" Exp11 ;

ESm.                Exp9  ::= Exp9 "<" Exp10 ;
EGt.                Exp9  ::= Exp9 ">" Exp10 ;
ESmEq.              Exp9  ::= Exp9 "<=" Exp10 ;
EGtEq.              Exp9  ::= Exp9 ">=" Exp10 ;

EEq.                Exp8  ::= Exp8 "==" Exp9 ;
ENEq.               Exp8  ::= Exp8 "!=" Exp9 ;

EAnd.               Exp4  ::= Exp4 "&&" Exp5 ;

EOr.                Exp3  ::= Exp3 "||" Exp4 ;

EAssOp.             Exp2  ::= Exp3 AssOp Exp2 ;
ECond.              Exp2  ::= Exp3 "?" Exp2 ":" Exp2 ;

EExcep.             Exp1  ::= "throw" Exp2 ;

coercions           Exp 16 ;


-- Assignment operators -------------------------------------------------------------------------------

OpAss.        AssOp ::= "="  ;
OpAssAdd.     AssOp ::= "+=" ;
OpAssSub.     AssOp ::= "-=" ;
OpAssMul.     AssOp ::= "*=" ;
OpAssDiv.     AssOp ::= "/=" ;
OpAssMod.     AssOp ::= "%=" ;
OpAssLeft.    AssOp ::= "<<=" ;
OpAssRight.   AssOp ::= ">>=" ;
OpAssAnd.     AssOp ::= "&=" ;
OpAssXor.     AssOp ::= "^=" ;
OpAssOr.      AssOp ::= "|=" ;



-- terminator and Separators  -------------------------------------------------------------------------------

terminator          Def "" ;
terminator          Stm "" ;
separator           FunctionArg "," ;
separator nonempty  Id "," ;
separator           VarInit "" ;
separator nonempty  Type "," ;
separator           Exp "," ;
separator nonempty  String "" ;

token Id (letter (letter | digit | '_')*) ;

























