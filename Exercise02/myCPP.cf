-- Programm

PDefs.              Program ::= [Def] ;


-- Definitions

DFunc.              Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;


terminator          Def "" ;
terminator          Stm "" ;
separator           Arg "," ;
separator nonempty  Id "," ;

-- BasicTypes

Tbool.              Type ::= "bool" ;
Tdouble.            Type ::= "double" ;
Tint.               Type ::= "int" ;
Tstring.            Type ::= "string" ;
Tvoid.              Type ::= "void" ;
Tchar.              Type ::= "char" ;
Tshort.             Type ::= "short" ;
Tlong.              Type ::= "long" ;
Tfloat.             Type ::= "float" ;
Tsigned.            Type ::= "signed" ;
Tunsigned.          Type ::= "unsigned" ;

TQCOT.              Type ::= [QCOT] ;
separator nonempty  QCOT "::" ;

QCOTId.             QCOT ::= Id ;
QCOTTemplate.       QCOT ::= Id "<" [Type] ">" ;

separator           Type "," ;

-- Statments


SExp.               Stm ::= Exp ";" ;
SDecl.              Stm ::= Type Id ";" ;
SDecls.             Stm ::= Type Id "," [Id] ";" ;
SInit.              Stm ::= Type Id "=" Exp ";" ;

SReturn.            Stm ::= "return" Exp ";" ;
SReturnVoid.        Stm ::= "return" ";" ;

SWhile.             Stm ::= "while" "(" Exp ")" Stm ;
SDo.                Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor.               Stm ::= "for" "(" Stm Exp ";" Exp ")" Stm ;

SIf.                Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.            Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

SBlock.             Stm ::= "{" [Stm] "}";

SStruct.            Stm ::= "struct" Id "{" [Stm] "}" ";" ;
STypedef.           Stm ::= "typedef" Type Id ";" ;

ADecl.              Arg ::= Type Id ;


-- Comments

comment "//" ;
comment "/*" "*/";
comment "#" ;


-- Expressions

EInt.               Exp16 ::= Integer ;
EDouble.            Exp16 ::= Double ;
EString.            Exp16 ::= String ;
EChar.              Exp16 ::= Char ;
ETrue.              Exp16 ::= "true" ;
EFalse.             Exp16 ::= "false" ;
--EId.            Exp16 ::= Id ;
EQCOT.              Exp16 ::= [QCOT] ;

ECall.              Exp15 ::= Id "(" [Exp] ")" ;

EIndex.             Exp15 ::= Id "::" Id ;
EQuali.             Exp15 ::= Id "[" Id "]" ;

EPIncr.             Exp14 ::= Exp15 "++" ;
EPDecr.             Exp14 ::= Exp15 "--" ;
EDeref.             Exp14 ::= "*" Id ;

EDot.               Exp14 ::= Id "." Id ;
EArrow.             Exp14 ::= Id "->" Id ;

EIncr.              Exp13 ::= "++" Exp14 ;
EDecr.              Exp13 ::= "--" Exp14 ;
ELogNeg.            Exp13 ::= "!" Exp16 ;

--ECast.              Exp13 ::= "(" Type ")" Exp14 ;

ENeg.               Exp13 ::= "-" Exp14 ;

EMul.               Exp12 ::= Exp12 "*" Exp13 ;
EDiv.               Exp12 ::= Exp12 "/" Exp13 ;
EMod.               Exp12 ::= Exp12 "%" Exp13 ;

EAdd.               Exp11 ::= Exp11 "+" Exp12 ;
ESub.               Exp11 ::= Exp11 "-" Exp12 ;

ELShift.            Exp10 ::= Exp10 "<<" Exp11 ;
ERShift.            Exp10 ::= Exp10 ">>" Exp11 ;

ESm.                Exp9  ::= Exp9 "<" Exp10 ;
EGt.                Exp9  ::= Exp9 ">" Exp10 ;
ESmEq.              Exp9  ::= Exp9 "<=" Exp10 ;
EGtEq.              Exp9  ::= Exp9 ">=" Exp10 ;

EEq.                Exp8  ::= Exp8 "==" Exp9 ;
ENEq.               Exp8  ::= Exp8 "!=" Exp9 ;

EAnd.               Exp4  ::= Exp4 "&&" Exp5 ;

EOr.                Exp3  ::= Exp3 "||" Exp4 ;

EAss.               Exp2  ::= Exp3 "=" Exp2 ;
EAssAdd.            Exp2  ::= Exp3 "+=" Exp2 ;
EAssSub.            Exp2  ::= Exp3 "-=" Exp2 ;
EAssMul.            Exp2  ::= Exp3 "*=" Exp2 ;
EAssDiv.            Exp2  ::= Exp3 "/=" Exp2 ;
EAssMod.            Exp2  ::= Exp3 "%=" Exp2 ;
EAssLeft.           Exp2  ::= Exp3 "<<=" Exp2 ;
EAssRight.          Exp2  ::= Exp3 ">>=" Exp2 ;
EAssAnd.            Exp2  ::= Exp3 "&=" Exp2 ;
EAssXor.            Exp2  ::= Exp3 "^=" Exp2 ;
EAssOr.             Exp2  ::= Exp3 "|=" Exp2 ;

ECond.              Exp2  ::= Exp3 "?" Stm ":" Stm ;

EExcep.             Exp1  ::= "throw" Exp2 ;

coercions           Exp 16 ;
separator           Exp "," ;

token               Id (letter (letter | digit | '_')*) ;


























